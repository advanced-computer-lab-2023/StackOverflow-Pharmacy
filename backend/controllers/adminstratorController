const Admin = require('../models/adminstrator')
const Pharmacist = require('../models/pharmacist')
const Patient = require('../models/doctor')
const Medicine = require('../models/medicine')
//const Package= require('../models/package')
const jwt = require('jsonwebtoken')

const createWebToken = (_id) => {
  return jwt.sign({_id}, process.env.SECRET_KEY, {expiresIn: '1d'})
}

const addadmin = async (req, res) => {
  try {
    const {userName, password} = req.body
    if (!userName) {
      throw new Error('name required')
    }
    const user = await Admin.create({userName, password})
    // if (user) {
    //   const token = createWebToken(user._id)
    //   res.cookie('jwt',token, {httpOnley: true, maxAge: 86400 * 1000})
    //   res.status(200).json({name: user.name, email:user.email, role:user.role})
    // } else {
    //   res.status(500).json({error: 'Failed to create user'})
    // }
  } catch (error) {
    res.status(500).json({error: error.message})
  }
}
const removeAdmin = async (req, res) => {
  const { id } = req.params

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({error: 'No such workout'})
  }

  const admin = await Admin.findOneAndDelete({_id: id})

  if(!admin) {
    return res.status(400).json({error: 'No such workout'})
  }

  res.status(200).json(admin)
}
const removePharmacist = async (req, res) => {
  const { id } = req.params

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({error: 'No such workout'})
  }

  const pharmacist = await Pharmacist.findOneAndDelete({_id: id})

  if(!pharmacist) {
    return res.status(400).json({error: 'No such workout'})
  }

  res.status(200).json(pharmacist)
}
const getMedicine = async (req, res) => {
    try {
      const medicine = await Medicine.find({ 'numStock': { $ne: 0 } });
  
      if (medicine.length === 0) {
        return res.status(404).json({ message: "No medicines with stock available." });
      }
  
      res.status(200).json(medicine);
    } catch (error) {
      // Handle any errors that may occur during the database query
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
  const filterMecicineByMedicalUse = async (req, res) => {
    try {
      const { medicalUse } = req.query;
  
      if (!medicalUse) {
        return res.status(400).json({ error: "Please provide a medical use for filtering medicines." });
      }
  
      const medicine = await Workout.find({ 'Medicine.medicalUse': medicalUse });
  
      if (medicine.length === 0) {
        return res.status(404).json({ message: "No medicines found for the provided medical use." });
      }
  
      res.status(200).json(medicine);
    } catch (error) {
      // Handle any errors that may occur during the database query
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
  
  const searchMedicineByName = async (req, res) => {
    try {
      const { name } = req.params;
  
      if (!name) {
        return res.status(400).json({ error: "Please provide a medicine name for searching." });
      }
  
      // Use a case-insensitive regular expression for a partial name match
      const query = { 'Medicine.name': { $regex: new RegExp(name, 'i') } };
  
      // Retrieve medicines matching the name
      const medicines = await Workout.find(query);
  
      if (medicines.length === 0) {
        return res.status(404).json({ message: "No medicines found with the provided name." });
      }
  
      res.status(200).json(medicines);
    } catch (error) {
      // Handle any errors that may occur during the database query
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
  
  
  
const getPharmacistInfo = async (req, res) => {
  const { id } = req.params

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(404).json({error: 'No such workout'})
  }

  const pharmacist = await Pharmacist.findById(id)

  if (!pharmacist) {
    return res.status(404).json({error: 'No such workout'})
  }

  res.status(200).json(pharmacist)
}
const getPatientInfo = async (req, res) => {
    const { id } = req.params
  
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(404).json({error: 'No such workout'})
    }
  
    const patient = await Patient.findById(id)
  
    if (!patient) {
      return res.status(404).json({error: 'No such workout'})
    }
  
    res.status(200).json(patient)
  }
const removePatient = async (req, res) => {
  const { id } = req.params

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({error: 'No such workout'})
  }

  const patient = await Patient.findOneAndDelete({_id: id})

  if(!patient) {
    return res.status(400).json({error: 'No such workout'})
  }

  res.status(200).json(patient)
}

const login = async (req, res) => {
  try {
    const {userName, password} = req.body
    const user = await User.findOne({userName})
    if (user && user.password === password) {
      const token = createWebToken(user._id)
      res.cookie('jwt',token, {httpOnley: true, maxAge: 86400 * 1000})
      res.status(200).json({name: user.name, email:user.email, role:user.role})
    }
    if (user) {
      const token = createWebToken(user._id)
      res.cookie('jwt',token, {httpOnley: true, maxAge: 86400 * 1000})
      res.status(200).json({name: user.name, email:user.email, role:user.role})
    } else {
      res.status(500).json({error: 'Failed to create user'})
    }
  } catch (error) {
    res.status(500).json({error: error.message})
  }
}
const getData = async (req, res) => {
  try {
    const user = req.user
    if (user) {
      res.status(200).json({name: user.name, email:user.email, role:user.role})
    } else {
      res.status(500).json({error: 'Failed to get user'})
    }
  } catch (error) {
    res.status(500).json({error: error.message})
  }
}
const logout = async (req, res) => {
  try {
    res.cookie('jwt','', {httpOnley: true, maxAge: 86400 * 1000})
    
      res.status(200).json({message:'Logged out successfully'})
  } catch (error) {
    res.status(500).json({error: error.message})
  }
}



module.exports = {
addadmin,
removeAdmin,
removeDoctor,
removePatient,
getDoctorInfo,
addPackage,
removePackage,
updatePackage

}